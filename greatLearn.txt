#Import statement

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.datasets import load_boston as bd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from statsmodels.stats.diagnostic import linear_rainbow
from scipy import stats
from scipy.stats import norm 


encoding = "ISO-8859-1"
 
 # User defined function to calculate MAPE from actual and predicted values. 
def MAPE (y_test, y_pred):
    y_test, y_pred = np.array(y_test), np.array(y_pred)
    return np.mean(np.abs((y_test - y_pred) / y_test)) * 100


---VIF
features=X.columns
X1=X[features]
vf= [vif(X1.values,i) for i in  range(X1.shape[1])]
vech_vif=pd.DataFrame(vf, index=X1.columns, columns=["VIF"]).sort_values(by="VIF",ascending=False)
vech_vif.head(2)

----CV
from sklearn.model_selection import cross_val_score
lr=LinearRegression()
score=cross_val_score(lr,x,y,cv=5,scoring="r2")
score

---RFE
lr=LinearRegression()
rfe=RFE(estimator=lr, n_features_to_select=8)
rfe_model=rfe.fit(x,y)
rank=pd.DataFrame()
rank["Feature"] = x.columns
rank["Rank"]= rfe_model.ranking_
#rank[rank["Rank"]==1]
feature_rfe=rank[rank["Rank"]==1]["Feature"]
x[rank[rank["Rank"]==1]["Feature"]]

------KFOLD
x=[11,22,33,44,55,66,77,88,99,110]
y=[3,6,9,12,15,18,21,24,27,30]
kf=KFold(n_splits=5)
for d1, d2 in kf.split(d):
  lr=LinearRegression()
  trainx=list(x[i] for i in  d1.tolist())
  trainy=list(y[i] for i in  d1.tolist())
  testx=list(x[i] for i in  d2.tolist())
  testy=list(y[i] for i in  d2.tolist())
  #print(np.reshape( trainx,(-1,1)), np.reshape(trainy,(-1,1)))
  model=lr.fit(np.reshape( trainx,(-1,1)), np.reshape(trainy,(-1,1)))
  ypred=model.predict(np.reshape(testy,(-1,1)))
  print(mean_squared_error(testy, ypred),r2_score(testy,ypred))



#User defined function to evaluate the given model. 
def evaluateModel(model,x_train,x_test, y_train, y_test ,info):
    global Results
    model.fit(x_train, y_train)
    y_pred = model.predict(x_test)

    # Evaluation of MAPE 
    result = MAPE(y_test, y_pred)
    
    # Calculate Adjusted R squared values 
    r_squared = round(metrics.r2_score(y_test, y_pred),3)
    adjusted_r_squared = round(1 - (1-r_squared)*(len(y)-1)/(len(y)-X.shape[1]-1),3)

    ypred_test=y_pred
    ypred_train=model.predict(xtrain)

    train_r2=round(metrics.r2_score(ytrain,ypred_train),3)
    test_r2=round(metrics.r2_score(ytest,ypred_test),3)

    

    new_row = {'Model Name' :  str(model),
               'MAE' : metrics.mean_absolute_error(y_test, y_pred),
               'R2' :r_squared,
               'R2_Test' : test_r2,
               'R2_Train' : train_r2,
               'Adj_R2_Test' :  round(1 - (1-test_r2)*(len(y)-1)/(len(y)-X.shape[1]-1),3),
               'Adj_R2_Train' :  round(1 - (1-train_r2)*(len(y)-1)/(len(y)-X.shape[1]-1),3),
               'RMSE_Test' : round(np.sqrt(metrics.mean_squared_error(y_test, y_pred)),3),
               'RMSE_Train' : round(np.sqrt(metrics.mean_squared_error(ytrain,ypred_train)),3),
               'MAPE' : result,
               'MSE_Test' : metrics.mean_squared_error(y_test, y_pred),
               'MSE_Train' : metrics.mean_squared_error(ytrain,ypred_train),
               'RMSLE': np.log(np.sqrt(metrics.mean_squared_error(y_test, y_pred))),
               'info': info}
    Results = Results.append(new_row, ignore_index=True)
    
    
    
